# 工作流名称 (Workflow name)
name: Rust CI Multi-Arch

# 触发工作流的事件 (Events that trigger the workflow)
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # 构建 wheel 文件的作业 (Job to build wheel files)
  build-wheels:
    # 作业名称，包含操作系统、架构和 Python 版本
    # (Job name including OS, architecture, and Python version)
    name: Build wheels on ${{ matrix.os }} for ${{ matrix.arch }} / Python ${{ matrix.python-version }}
    # 运行作业的 runner 类型 (Runner type for the job)
    runs-on: ${{ matrix.os }}
    strategy:
      # 如果一个矩阵构建失败，不取消其他构建
      # (Do not cancel other builds if one matrix build fails)
      fail-fast: false
      # 定义构建矩阵 (Define the build matrix)
      matrix:
        # 操作系统列表 (List of operating systems)
        # 目前仅使用 ubuntu-latest，未来可以添加 macos/windows
        # (Currently only using ubuntu-latest, can add macos/windows in the future)
        os: [ ubuntu-latest ]
        # 架构列表 (List of architectures)
        arch: [ x86_64, aarch64 ]
        # Python 版本列表 (List of Python versions)
        python-version: [ "3.12", ]

    steps:
      # 步骤 1：检出代码 (Step 1: Checkout code)
      - name: Checkout code
        uses: actions/checkout@v4

      # 步骤 2：设置 QEMU (仅在需要模拟架构时)
      # (Step 2: Set up QEMU (only when architecture emulation is needed))
      - name: Set up QEMU
        # 仅当目标架构是 aarch64 时运行此步骤
        # (Only run this step if the target architecture is aarch64)
        if: matrix.arch == 'aarch64'
        uses: docker/setup-qemu-action@v3
        with:
          # 指定要模拟的平台 (Specify the platform to emulate)
          platforms: linux/arm64 # 对应 aarch64 (Corresponds to aarch64)

      # 步骤 3：设置指定架构的 Python 环境
      # (Step 3: Set up Python environment for the specified architecture)
      - name: Set up Python ${{ matrix.python-version }} (${{ matrix.arch }})
        uses: actions/setup-python@v5
        with:
          # 指定 Python 版本 (Specify Python version)
          python-version: ${{ matrix.python-version }}
          # 指定 Python 架构 (Specify Python architecture)
          architecture: ${{ matrix.arch }}

      # 步骤 4：安装 Rust 工具链 (稳定版)
      # (Step 4: Install Rust toolchain (stable))
      # dtolnay/rust-toolchain 操作会自动适应 QEMU 模拟的架构
      # (The dtolnay/rust-toolchain action automatically adapts to the architecture emulated by QEMU)
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          # 这里不需要指定 target，它会为 (模拟的) 主机架构安装
          # (No target needed here, it installs for the (emulated) host architecture)

      # 步骤 5：安装 uv 构建工具
      # (Step 5: Install uv build tool)
      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      # 步骤 6：将 uv 和 cargo 添加到系统 PATH
      # (Step 6: Add uv and cargo to the system PATH)
      # uv 默认安装到 ~/.local/bin (uv installs to ~/.local/bin by default)
      - name: Add uv & cargo to PATH
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      # 步骤 7：显示工具版本 (用于调试)
      # (Step 7: Display tool versions (for debugging))
      - name: Display tool versions
        run: |
          echo "Python path: $(which python)"
          python --version
          echo "Rustc path: $(which rustc)"
          rustc --version --verbose
          echo "uv path: $(which uv)"
          uv --version

      # 步骤 8：使用 uv 构建项目 (uv 会调用 maturin)
      # (Step 8: Build the project using uv (uv calls maturin))
      # uv build 在 QEMU 环境下应能自动检测目标架构
      # (uv build should automatically detect the target architecture under QEMU)
      - name: Build wheel with uv (${{ matrix.arch }})
        # --verbose 标志有助于排查构建问题
        # (The --verbose flag helps troubleshoot build issues)
        run: uv build --release --verbose -o dist

      # 步骤 9：上传构建好的 wheel 文件作为 artifact
      # (Step 9: Upload the built wheel file as an artifact)
      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          # 使用包含 Python 版本、架构和操作系统的清晰名称
          # (Use a clear name including Python version, architecture, and OS)
          name: python-wheel-${{ matrix.python-version }}-${{ matrix.arch }}-${{ runner.os }}
          # 上传 dist 目录中的所有 .whl 文件
          # (Upload all .whl files in the dist directory)
          path: dist/*.whl
